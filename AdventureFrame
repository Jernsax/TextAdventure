package textadventure;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Enumeration;
import javax.swing.*;

/**
 *
 * @author Jernsax
 */
public class AdventureFrame extends JFrame implements ActionListener {

    Items it = new Items();
    LocationManager cl = new LocationManager(this);
    AdventureFrame denne = this;

    String pee = "Tis";
    String kaffe;
    String remote;

    JTextArea maintext = new JTextArea(1000, 100);
    JTable inventory;
    JScrollPane inventoryModel = new JScrollPane(inventory);
    JTextField actionCount = new JTextField();
    JTextField input;
    JLabel actionCountLabel = new JLabel();

    JLabel b = new JLabel();

    JLabel slot1 = new JLabel();
    JLabel slot2 = new JLabel();
    JLabel slot3 = new JLabel();
    JLabel slot4 = new JLabel();

    final JPanel p = new JPanel();
    final JPanel m = new JPanel();
    JPanel f = new JPanel();

    JButton ok;

    int actionCounter = 1;

    JMenuBar toolBar = new JMenuBar();

    JMenu file = new JMenu("File");

    JMenuItem newGame = new JMenuItem("Start new game");
    JMenuItem loadGame = new JMenuItem("Load game");
    JMenuItem saveGame = new JMenuItem("Save game");

    {
        file.add(newGame);
        file.add(loadGame);
        file.add(saveGame);
        toolBar.add(file);

        newGame.addActionListener(this);
        loadGame.addActionListener(this);
        saveGame.addActionListener(this);
    }

    public AdventureFrame() {
        m.add(b);
        setTitle("Text adventure");
        setSize(1000, 975);
        setResizable(false);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        this.setJMenuBar(toolBar);

        ok = new JButton("OK");

        ok.addActionListener(this);

        input = new JTextField();

        maintext.setEditable(false);
        actionCount.setEditable(false);

        p.setLayout(null);

        JLabel inventory = new JLabel("Inventory");

        f.setLayout(new GridLayout(5, 0));
        f.add(inventory);
        f.add(slot1);
        f.add(slot2);
        f.add(slot3);
        f.add(slot4);
//SetBounds
        f.setBounds(10, 430, 230, 106);

        m.setBounds(250, 555, 500, 355);
        p.add(m);
        ok.setBounds(920, 450, 60, 30);
        input.setBounds(710, 450, 200, 30);
        maintext.setBounds(10, 10, 970, 400);
        actionCount.setBounds(920, 500, 60, 30);
        actionCountLabel.setBounds(830, 500, 80, 30);
        actionCountLabel.setText("Antal actions:");

        //f.add(inventory);
        p.add(f);

        p.add(maintext);
        p.add(input);
        p.add(ok);
        p.add(actionCount);
        p.add(actionCountLabel);

        p.setBackground(Color.GRAY);
        m.setBackground(Color.GRAY);
        f.setBackground(Color.WHITE);
        actionCount.setBackground(Color.WHITE);
        this.add(p);

        setVisible(true);

        //Add tis til inventory
        slot1.setText(pee);
        cl.locations();

    }

    public void updateActionCounter() {
        int tempAction = actionCounter++;
        actionCount.setText(tempAction + "");
    }

    public void takeItem() {
        String action = input.getText();

    }

    public void setMap() {

        ImageIcon map = new ImageIcon(cl.currentLocation.getImageLocation());
        b.setIcon(map);

    }

    public void showLocation() {

        //Clear
        maintext.setText("");

        //Titel
        maintext.append(cl.currentLocation.getTitle());

        maintext.append("\n");

        //Description
        maintext.append(cl.currentLocation.getDescription() + "\n");

        setMap();

        //Exits
        maintext.append("\nMuligheder: \n");
        for (Enumeration e = cl.currentLocation.getExits().elements(); e.hasMoreElements();) {
            Exit option = (Exit) e.nextElement();
            maintext.append(option + "\n");

        }

        //Items
        maintext.append("\nI rummet er der følgende ting:\n\n");
        for (Ting t : cl.currentLocation.getStuff()) {
            maintext.append(t.toString() + "\n");
        }

    }

    @Override
    public void actionPerformed(ActionEvent ae) {

        String action = input.getText();

        if (ae.getSource() == ok) {

            if (action.length() == 0) {
                JOptionPane.showMessageDialog(null, "Ikke en gyldig action!");
                actionCounter--;

            } else {

                if (actionCounter == 4 && pee.equals("Tis")) {

                    JOptionPane.showMessageDialog(null, "Du skulle måske være gået på toilettet, for nu er det i den grad forsent.\n\n"
                            + "En gylden sø samler sig omkring dine fødder, og nu er din søndag morgen i den grad ødelagt.\n\n"
                            + "Du når helt sikkert ikke at se Heksene fra Warren Manor. Pokkers!\n\n\n"
                            + "Øv, du har tabt spillet! Start et nyt spil for at prøve igen!\n");

                } else if (action.toUpperCase().equals("KAFFEKOP")) {

                    JOptionPane.showMessageDialog(null, "En kop varm macchiato i en semiren kop er altid en god måde at starte dagen på!");

                    cl.currentLocation.getStuff().remove(1);

                    slot2.setText("Kaffekop");
                    kaffe = "Kaffe";

                    showLocation();

                } else if (action.toUpperCase().equals("BUKSER")) {
                    JOptionPane.showMessageDialog(null, "Bukserne trænger egentlig til at blive vasket. Men de kan godt gå en dag mere. Måske to.");

                    cl.currentLocation.getStuff().remove(0);

                    slot3.setText("Bukser");

                    showLocation();

                } else if (action.toUpperCase().equals("FJERNBETJENING")) {

                    JOptionPane.showMessageDialog(null, "Fjernbetjeningen er ved at løbe tør for strøm, men den skal bare have et par klask før den virker.");

                    cl.currentLocation.getStuff().remove(2);

                    slot4.setText("Fjernbetjening");

                    remote = "Fjernbetjening";

                    showLocation();

                } else if (action.toUpperCase().equals("FJERNSYN")) {

                    JOptionPane.showMessageDialog(null, "Du føler ikke for at bære rundt på fjernsynet lige nu.\n\nVille det ikke være langt bedre at se noget fjernsyn?");

                } else if (action.toUpperCase().equals("SOFABORD")) {

                    JOptionPane.showMessageDialog(null, "Sofabordet er rodet og tungt.\n\nDet er ikke lige til at flytte.");

                } else if (action.toUpperCase().equals("SOFA")) {

                    JOptionPane.showMessageDialog(null, "Sofaen er gammel og støvet.\n\nDer er lige en siddeplads i hjørnet, resten er dækket i magasiner og Playstationspil.");

                } else if (action.toUpperCase().equals("KAFFEMASKINE")) {

                    JOptionPane.showMessageDialog(null, "Kaffemaskinen er meget varm.");

                } else if (action.toUpperCase().equals("NATLAMPE")) {

                    JOptionPane.showMessageDialog(null, "Natlampen er en gammel en, og ledningen er en smule mør.\n\nDet er nok ikke en god ide at flytte rundt på den.");

                } else if (action.toUpperCase().equals("SENG")) {

                    JOptionPane.showMessageDialog(null, "Din seng står fint, hvor den står. Lad nu den stå.");

                } else if (action.toUpperCase().equals("TOILET")) {

                    JOptionPane.showMessageDialog(null, "Dit toilet trænger til en rengøring.\n\nMåske senere idag? Naaah.");

                } else if (action.toUpperCase().equals("JAKKE")) {

                    JOptionPane.showMessageDialog(null, "Hvornår har du egentlig sidst haft jakken på?\n\nDen har ihvertfald ligget på gulvet længe!");

                } else if (action.toUpperCase().equals("KØLESKAB")) {

                    JOptionPane.showMessageDialog(null, "Køleskabet er tomt, pånær for en pizzabakke.\n\nDu kigger forhåbningsfuldt i den, men den er også tom.");

                } else if (action.toUpperCase().equals("TIS")) {

                    action = action.toUpperCase();

                    Location currentLocation = cl.currentLocation;

                    for (Enumeration e = currentLocation.getExits().elements(); e.hasMoreElements();) {
                        Exit option = (Exit) e.nextElement();

                        if ((option.getDirectionName().compareTo(action) == 0)) {

                            //Set location
                            currentLocation = option.getLeadsTo();
                            cl.currentLocation = currentLocation;

                            //Clear maintext
                            maintext.setText("");

                            //Show
                            showLocation();
                            pee = "";
                            slot1.setText("");
                            //Clear input
                            input.setText(null);

                        }
                    }

                } else {

                    updateActionCounter();
                    action = action.toUpperCase();

                    Location currentLocation = cl.currentLocation;

                    for (Enumeration e = currentLocation.getExits().elements(); e.hasMoreElements();) {
                        Exit option = (Exit) e.nextElement();

                        if ((option.getDirectionName().compareTo(action) == 0)) {

                            //Set location
                            currentLocation = option.getLeadsTo();
                            cl.currentLocation = currentLocation;

                            //Clear maintext
                            maintext.setText("");

                            //Show
                            showLocation();

                            //Clear input
                            input.setText(null);

                        }
                    }
                }

                input.setText(null);
            }

        } else if (ae.getSource() == newGame) {
            int optionNewGame = JOptionPane.showConfirmDialog(null, "Ønsker du at starte et nyt spil?");
            if (optionNewGame == 0) {
                cl = SaveLoad.getDisc().newGame();
                cl.setAdventureFrame(denne);

                showLocation();

                JOptionPane.showMessageDialog(null, "Nyt spil startet.");
            }
            if (optionNewGame == 1) {
                JOptionPane.showMessageDialog(null, "Nyt spil annuleret.");
            }
            if (optionNewGame == 2) {
                JOptionPane.showMessageDialog(null, "Nyt spil cancel.");
            }
        } else if (ae.getSource() == loadGame) {
            int optionLoadGame = JOptionPane.showConfirmDialog(null, "Ønsker du at hente et tidligere gemt spil?");
            if (optionLoadGame == 0) {
                cl = SaveLoad.getDisc().load();

                cl.setAdventureFrame(denne);

                showLocation();

                JOptionPane.showMessageDialog(null, "Spil er hentet.");
            }
            if (optionLoadGame == 1) {
                JOptionPane.showMessageDialog(null, "Load spil annuleret.");
            }
            if (optionLoadGame == 2) {
                JOptionPane.showMessageDialog(null, "Load spil cancel.");
            }
        } else if (ae.getSource() == saveGame) {
            int optionSaveGame = JOptionPane.showConfirmDialog(null, "Ønsker du at gemme din position?");
            if (optionSaveGame == 0) {
                SaveLoad.getDisc().save(cl);

                JOptionPane.showMessageDialog(null, "Spil er gemt.");
            }
            if (optionSaveGame == 1) {
                JOptionPane.showMessageDialog(null, "Save spil annuleret.");
            }
            if (optionSaveGame == 2) {
                JOptionPane.showMessageDialog(null, "Save spil cancel.");
            }

        }

    }
}
