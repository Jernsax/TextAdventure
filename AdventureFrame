package textadventure;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jernsax
 */
public class AdventureFrame extends JFrame implements ActionListener {

    Player pl = new Player();
    LocationManager cl = new LocationManager(this);
    AdventureFrame denne = this;

    //private BufferedImage locationMap;
    JTextArea maintext = new JTextArea(1000, 100);
    JTable inventory;
    JScrollPane inventoryModel = new JScrollPane(inventory);
    JTextField actionCount = new JTextField();
    JTextField input;
    JLabel actionCountLabel = new JLabel();

    JLabel b = new JLabel();

    final JPanel p = new JPanel();
    final JPanel m = new JPanel();

    JButton ok;
    JButton west;
    JButton east;
    JButton north;
    JButton south;

    int actionCounter = 1;

    JMenuBar toolBar = new JMenuBar();

    JMenu file = new JMenu("File");

    JMenuItem newGame = new JMenuItem("Start new game");
    JMenuItem loadGame = new JMenuItem("Load game");
    JMenuItem saveGame = new JMenuItem("Save game");

    {
        file.add(newGame);
        file.add(loadGame);
        file.add(saveGame);
        toolBar.add(file);

        newGame.addActionListener(this);
        loadGame.addActionListener(this);
        saveGame.addActionListener(this);
    }

    public AdventureFrame() {
        m.add(b);
        setTitle("Text adventure");
        setSize(1000, 975);
        setResizable(false);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        this.setJMenuBar(toolBar);

        playerName();
        updateInventory();

        ok = new JButton("OK");
        west = new JButton("West");
        east = new JButton("East");
        north = new JButton("North");
        south = new JButton("South");

        ok.addActionListener(this);
        west.addActionListener(this);
        east.addActionListener(this);
        north.addActionListener(this);
        south.addActionListener(this);

        input = new JTextField();

        maintext.setEditable(false);
        actionCount.setEditable(false);

        p.setLayout(null);

        JPanel f = new JPanel();

//SetBounds
        f.setBounds(10, 420, 300, 106);

        m.setBounds(10, 560, 500, 350);
        p.add(m);
        ok.setBounds(855, 450, 60, 30);
        input.setBounds(655, 450, 200, 30);
        maintext.setBounds(10, 10, 970, 400);
        actionCount.setBounds(855, 500, 60, 30);
        actionCountLabel.setBounds(770, 500, 80, 30);
        actionCountLabel.setText("Antal actions:");

        //Compass
        north.setBounds(750, 680, 70, 70);
        south.setBounds(750, 820, 70, 70);
        west.setBounds(680, 750, 70, 70);
        east.setBounds(820, 750, 70, 70);

        f.add(new JScrollPane(inventory));

        p.add(f);

        p.add(maintext);
        p.add(input);
        p.add(ok);
        p.add(actionCount);
        p.add(actionCountLabel);

        //Compass
        p.add(west);
        p.add(east);
        p.add(north);
        p.add(south);

        p.setBackground(Color.GRAY);
        //m.setBackground(Color.PINK);
        this.add(p);

        setVisible(true);
        cl.locations();
    }

    public void updateInventory() {
        DefaultTableModel inventoryModel = new DefaultTableModel();
        inventory = new JTable(inventoryModel);

        inventoryModel.setColumnIdentifiers(new String[]{"Items"});
        inventoryModel.setRowCount(pl.getInventory().size());

        int row = 0;
        for (Player i : pl.getInventory()) {
            inventoryModel.setValueAt(i.getInventory(), row, 0); //TJEK DET HER
        }
    }

    public void updateActionCounter() {
        actionCount.setText(actionCounter++ + "");
    }

    public void takeItem() {
        String action = input.getText();

    }

    public void setMap() {

        ImageIcon map = new ImageIcon(cl.currentLocation.getImageLocation());
        System.out.println(cl.currentLocation.getImageLocation());
        //ImageIcon map = new ImageIcon("sort.jpg");
        b.setIcon(map);
        //b.setBounds(10, 560, 500, 350);
        System.out.println("label: " + b.toString());

        this.repaint();
        //p.add(b);

    }

    public void showLocation() {

        //Clear
        maintext.setText("");

        //Titel
        maintext.append(cl.currentLocation.getTitle());

        maintext.append("\n");

        //Description
        maintext.append(cl.currentLocation.getDescription() + "\n");

        setMap();

        //Exits
        maintext.append("\nMuligheder: \n");
        for (Enumeration e = cl.currentLocation.getExits().elements(); e.hasMoreElements();) {
            Exit option = (Exit) e.nextElement();
            maintext.append(option + "\n");

        }

        //Items
        maintext.append("\nI rummet er der følgende ting:\n\n");
        for (Ting t : cl.currentLocation.getStuff()) {
            maintext.append(t.toString() + "\n");
        }

    }

    @Override
    public void actionPerformed(ActionEvent ae) {

        //Location l = new Location();
        String action = input.getText();

        if (ae.getSource() == ok) {

            if (action.length() == 0) {
                JOptionPane.showMessageDialog(null, "Ikke en gyldig action!");
                actionCounter--;

            } else {

                if (actionCounter == 40) {
                    JOptionPane.showMessageDialog(null, "Har du tisset?");

                } else {

                    updateActionCounter();
                    action = action.toUpperCase();

                    Location currentLocation = cl.currentLocation;

                    for (Enumeration e = currentLocation.getExits().elements(); e.hasMoreElements();) {
                        Exit option = (Exit) e.nextElement();

                        if ((option.getDirectionName().compareTo(action) == 0)) {

                            //Set location
                            currentLocation = option.getLeadsTo();
                            cl.currentLocation = currentLocation;

                            //Clear maintext
                            maintext.setText("");

                            //Show
                            showLocation();

                            //Clear input
                            input.setText(null);

                        }
                    }
                }

                input.setText(null);
            }

        } else if (ae.getSource() == newGame) {
            int optionNewGame = JOptionPane.showConfirmDialog(null, "Ønsker du at starte et nyt spil?");
            if (optionNewGame == 0) {
                JOptionPane.showMessageDialog(null, "Nyt spil startet.");
            }
            if (optionNewGame == 1) {
                JOptionPane.showMessageDialog(null, "Nyt spil annuleret.");
            }
            if (optionNewGame == 2) {
                JOptionPane.showMessageDialog(null, "Nyt spil cancel.");
            }
        } else if (ae.getSource() == loadGame) {
            int optionLoadGame = JOptionPane.showConfirmDialog(null, "Ønsker du at hente et tidligere gemt spil?");
            if (optionLoadGame == 0) {
                cl = SaveLoad.getDisc().load();
                cl.setAdventureFrame(denne);

                showLocation();

                JOptionPane.showMessageDialog(null, "Spil er hentet.");
            }
            if (optionLoadGame == 1) {
                JOptionPane.showMessageDialog(null, "Load spil annuleret.");
            }
            if (optionLoadGame == 2) {
                JOptionPane.showMessageDialog(null, "Load spil cancel.");
            }
        } else if (ae.getSource() == saveGame) {
            int optionSaveGame = JOptionPane.showConfirmDialog(null, "Ønsker du at gemme din position?");
            if (optionSaveGame == 0) {
                SaveLoad.getDisc().save(cl);

                JOptionPane.showMessageDialog(null, "Spil er gemt.");
            }
            if (optionSaveGame == 1) {
                JOptionPane.showMessageDialog(null, "Save spil annuleret.");
            }
            if (optionSaveGame == 2) {
                JOptionPane.showMessageDialog(null, "Save spil cancel.");
            }

        }

    }

    public void playerName() {
        String name = JOptionPane.showInputDialog(maintext, "Please enter player Name", "Player Name", WIDTH);
        pl.setHeroName(name);
    }

}
