package textadventure;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jernsax
 */
public class AdventureFrame extends JFrame implements ActionListener {

    
    
    Player pl = new Player();
    ChangeLocation cl = new ChangeLocation(this);

    JTextArea maintext = new JTextArea(1000, 100);
    JTable inventory;
    JScrollPane inventoryModel = new JScrollPane(inventory);

    JTextField input;

    JButton ok;
    JButton west;
    JButton east;
    JButton north;
    JButton south;

    JLabel blank;

    JMenuBar toolBar = new JMenuBar();

    JMenu file = new JMenu("File");

    JMenuItem newGame = new JMenuItem("Start new game");
    JMenuItem loadGame = new JMenuItem("Load game");
    JMenuItem saveGame = new JMenuItem("Save game");

    {
        file.add(newGame);
        file.add(loadGame);
        file.add(saveGame);
        toolBar.add(file);

        newGame.addActionListener(this);
        loadGame.addActionListener(this);
        saveGame.addActionListener(this);
    }

    public AdventureFrame() {
        setTitle("Text adventure");
        setSize(1000, 975);
        setResizable(false);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        this.setJMenuBar(toolBar);

        playerName();
        updateInventory();

        ok = new JButton("OK");
        west = new JButton("West");
        east = new JButton("East");
        north = new JButton("North");
        south = new JButton("South");
        //showMap = new JButton("Map");

        ok.addActionListener(this);
        west.addActionListener(this);
        east.addActionListener(this);
        north.addActionListener(this);
        south.addActionListener(this);
        //showMap.addActionListener(this);

        input = new JTextField();

        maintext.setEditable(false);

        JPanel p = new JPanel();
        p.setLayout(null);

        JPanel f = new JPanel();
        JPanel m = new JPanel();

//SetBounds
        f.setBounds(10, 420, 300, 106);
        m.setBounds(10, 560, 500, 350);

        ok.setBounds(855, 450, 60, 30);
        input.setBounds(655, 450, 200, 30);
        maintext.setBounds(10, 10, 970, 400);

        //Compass
        north.setBounds(750, 680, 70, 70);
        south.setBounds(750, 820, 70, 70);
        west.setBounds(680, 750, 70, 70);
        east.setBounds(820, 750, 70, 70);

        f.add(new JScrollPane(inventory));

        p.add(f);
        p.add(m);

        p.add(maintext);
        p.add(input);
        p.add(ok);

        //Compass
        p.add(west);
        p.add(east);
        p.add(north);
        p.add(south);

        m.setBackground(Color.DARK_GRAY);
        p.setBackground(Color.GRAY);
        this.add(p);

        setVisible(true);
        cl.locations();
    }

    public void updateInventory() {
        DefaultTableModel inventoryModel = new DefaultTableModel();
        inventory = new JTable(inventoryModel);

        inventoryModel.setColumnIdentifiers(new String[]{"Items"});
        inventoryModel.setRowCount(5);
    }

    @Override
    public void actionPerformed(ActionEvent ae) {

        Location l = new Location();

        String action = input.getText();

        if (ae.getSource() == ok) {
            if (action.length() == 0) {
            }

            action = action.toUpperCase();

            Location currentLocation = cl.currentLocation;

            for (Enumeration e = currentLocation.getExits().elements(); e.hasMoreElements();) {
                Exit option = (Exit) e.nextElement();

                if ((option.getDirectionName().compareTo(action) == 0)) {
                    System.out.println("Location skiftet FRA " + cl.currentLocation);

                    //Set location
                    currentLocation = option.getLeadsTo();
                    cl.currentLocation = currentLocation;

                    //Clear maintext
                    maintext.setText("");

                    //Show
                    cl.showLocation();

                    //Clear input
                    input.setText(null);

                }

            }

            input.setText(null);

        } else if (ae.getSource() == newGame) {
            int optionNewGame = JOptionPane.showConfirmDialog(null, "Ønsker du at starte et nyt spil?");
            if (optionNewGame == 0) {
                JOptionPane.showMessageDialog(null, "Nyt spil startet.");
            }
            if (optionNewGame == 1) {
                JOptionPane.showMessageDialog(null, "Nyt spil annuleret.");
            }
            if (optionNewGame == 2) {
                JOptionPane.showMessageDialog(null, "Nyt spil cancel.");
            }
        } else if (ae.getSource() == loadGame) {
            int optionLoadGame = JOptionPane.showConfirmDialog(null, "Ønsker du at hente et tidligere gemt spil?");
            if (optionLoadGame == 0) {
                

                JOptionPane.showMessageDialog(null, "Spil er hentet.");
            }
            if (optionLoadGame == 1) {
                JOptionPane.showMessageDialog(null, "Load spil annuleret.");
            }
            if (optionLoadGame == 2) {
                JOptionPane.showMessageDialog(null, "Load spil cancel.");
            }
        } else if (ae.getSource() == saveGame) {
            int optionSaveGame = JOptionPane.showConfirmDialog(null, "Ønsker du at gemme din position?");
            if (optionSaveGame == 0) {
                

                JOptionPane.showMessageDialog(null, "Spil er gemt.");
            }
            if (optionSaveGame == 1) {
                JOptionPane.showMessageDialog(null, "Save spil annuleret.");
            }
            if (optionSaveGame == 2) {
                JOptionPane.showMessageDialog(null, "Save spil cancel.");
            }

        }

    }

    public void playerName() {

        String name = JOptionPane.showInputDialog(maintext, "Please enter player Name", "Player Name", WIDTH);

        pl.setHeroName(name);

    }

}
